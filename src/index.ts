import dotenv from "dotenv";
import express from "express";
import bodyParser from "body-parser";

import {
  Bot,
  InlineKeyboard,
  Context,
  GrammyError,
  HttpError,
  webhookCallback,
} from "grammy";
import { hydrate, HydrateFlavor } from "@grammyjs/hydrate";

dotenv.config();

type Choice = "gameStone" | "gameScissors" | "gamePaper";

type MyContext = HydrateFlavor<Context>;

const bot = new Bot<MyContext>(process.env.TG_API_KEY || "");

bot.use(hydrate());

bot.api.setMyCommands([{ command: "start", description: "Start bot" }]);

bot.command("start", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("ü™®‚úÇÔ∏èüßª –ì—Ä–∞ '–ö–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ, –ø–∞–ø—ñ—Ä'", "game_ssp")
    .row()
    .text('‚ô£Ô∏è‚ô•Ô∏è –ü–∞—Å—å—è–Ω—Å "–ü—ñ—Ä–∞–º—ñ–¥–∞" ‚ô†Ô∏è‚ô¶Ô∏è', "game_piramida")
    .row()
    .webApp(`üí£ –ì—Ä–∞ "–°–∞–ø–µ—Ä" üí£`, "https://luzhnyak.github.io/minesweeper/");

  await ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è!", {
    reply_markup: inlineKeyboard,
  });
});

// =========================== Piramida game =

bot.callbackQuery("game_piramida", async (ctx) => {
  const chatId = ctx.from?.id;
  if (chatId) {
    await ctx.api.sendGame(chatId, "game_piramida");
  }
  ctx.answerCallbackQuery();
});

bot.on("callback_query:game_short_name", async (ctx) => {
  await ctx.answerCallbackQuery({
    url: "https://luzhnyak.github.io/pasyans-pyramida/",
  });
});

// =========================== Stone-Scissors-Paper game =

const inlineKeyboardSSP = new InlineKeyboard()
  .text("–ö–∞–º—ñ–Ω—å ü™®", "gameStone")
  .text("–ù–æ–∂–∏—Ü—ñ ‚úÇÔ∏è", "gameScissors")
  .text("–ü–∞–ø—ñ—Ä üßª", "gamePaper");

const descSSP = `–ì—Ä–∞—î–º–æ —É '–∫–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ, –ø–∞–ø—ñ—Ä'\\. –û–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: –∫–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ –∞–±–æ –ø–∞–ø—ñ—Ä\\.`;

bot.callbackQuery("game_ssp", async (ctx) => {
  await ctx.reply(descSSP, {
    reply_markup: inlineKeyboardSSP,
    parse_mode: "MarkdownV2",
  });
  ctx.answerCallbackQuery();
});

bot.callbackQuery(/game[Stone,Scissors,Paper]/, async (ctx) => {
  const userChoice: Choice = ctx.callbackQuery.data as Choice;
  const options = {
    gameStone: "ü™® –∫–∞–º—ñ–Ω—å",
    gameScissors: "‚úÇÔ∏è –Ω–æ–∂–∏—Ü—ñ",
    gamePaper: "üßª –ø–∞–ø—ñ—Ä",
  };

  // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –±–æ—Ç–∞
  const botChoice: Choice = Object.keys(options)[
    Math.floor(Math.random() * Object.keys(options).length)
  ] as Choice;

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  let result: string;
  if (userChoice === botChoice) {
    result = "*–ù—ñ—á–∏—è\\!*";
  } else if (
    (userChoice === "gameStone" && botChoice === "gameScissors") ||
    (userChoice === "gameScissors" && botChoice === "gamePaper") ||
    (userChoice === "gamePaper" && botChoice === "gameStone")
  ) {
    result = "*–¢–∏ –ø–µ—Ä–µ–º—ñ–≥\\!*";
    const userId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (ctx.update.callback_query.message?.message_id && userId && chatId) {
      const messageId = ctx.update.callback_query.message?.message_id;
      const points = Math.floor(Math.random() * 100) + 1;

      try {
        await ctx.api.setGameScore(chatId, messageId, userId, points);
        ctx.reply(`–í–∞—à –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${points} –±–∞–ª—ñ–≤!`);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤:", error);
      }
    } else {
      ctx.reply("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
  } else {
    result = "*–ë–æ—Ç –ø–µ—Ä–µ–º—ñ–≥\\!*";
  }

  try {
    await ctx.callbackQuery.message?.editText(
      `${descSSP}\n\n` +
        `*–†–µ–∑—É–ª—å—Ç–∞—Ç*\n` +
        `\n`.padStart(25, "‚ïê") +
        `–¢–≤—ñ–π –≤–∏–±—ñ—Ä: ${options[userChoice]}\n` +
        `–í–∏–±—ñ—Ä –±–æ—Ç–∞: ${options[botChoice]}\n` +
        `\n`.padStart(25, "‚ïê") +
        `${result}\n` +
        `\n`.padStart(25, "‚ïê"),
      {
        reply_markup: inlineKeyboardSSP,
        parse_mode: "MarkdownV2",
      }
    );
  } catch (error) {
    if (
      error instanceof GrammyError &&
      error.description ===
        "Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message"
    ) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –∫–æ–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ
      console.error("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å, –ø–æ–º–∏–ª–∫–∞ —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è.");
    } else {
      throw error; // –Ø–∫—â–æ —Ü–µ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞, –≤–æ–Ω–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —É bot.catch
    }
  }

  ctx.answerCallbackQuery();
});

// –û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫—ñ–≤
bot.on("message", async (ctx) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∏
  if (ctx.message?.text?.startsWith("score:")) {
    const parts = ctx.message.text.split(":");
    if (parts.length === 3) {
      const userId = parseInt(parts[1], 10);
      const score = parseInt(parts[2], 10);
      //   const db = await getDb();
      //   await db.run(
      //     "INSERT INTO scores (user_id, score) VALUES (?, ?)",
      //     userId,
      //     score
      //   );
      await ctx.reply(`–í–∞—à –±–∞–ª ${score} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!`);
    } else {
      await ctx.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
    }
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

// bot.start();

const app = express();
app.use(bodyParser.json());
app.use(webhookCallback(bot, "express"));

app.get("/", (req, res) => {
  res.sendStatus(200);
});

app.post("/webhook", (req, res) => {
  bot.handleUpdate(req.body);
  res.sendStatus(200);
});

// –í–∫–∞–∑–∞—Ç–∏ URL –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤
const setWebhook = async () => {
  const webhookUrl = `${process.env.BASE_URL}/webhook`;
  await bot.api.setWebhook(webhookUrl);
};

setWebhook();

// –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
